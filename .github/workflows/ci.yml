name: stm32-ens160-ci

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  TOOLCHAIN_URL: https://github.com/xpack-dev-tools/arm-none-eabi-gcc-xpack/releases/download/v14.2.1-1.1/xpack-arm-none-eabi-gcc-14.2.1-1.1-linux-x64.tar.gz

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build build-essential \
                                  qemu-system-arm cppcheck wget xz-utils
          mkdir -p $HOME/toolchains
          cd $HOME/toolchains
          wget -qO- ${TOOLCHAIN_URL} | tar xz
          echo "$HOME/toolchains/xpack-arm-none-eabi-gcc-14.2.1-1.1/bin" >> $GITHUB_PATH

      - name: Tool versions
        run: |
          arm-none-eabi-gcc --version
          cmake --version

      # ---------- 1) 主机侧单元测试（可选，若 tests/CMakeLists.txt 存在）
      - name: Configure host tests
        if: ${{ hashFiles('tests/CMakeLists.txt') != '' }}
        run: cmake -S . -B build-host -G Ninja -DENABLE_TESTS=ON -DCMAKE_BUILD_TYPE=${BUILD_TYPE}

      - name: Build host tests
        if: ${{ hashFiles('tests/CMakeLists.txt') != '' }}
        run: cmake --build build-host -j

      - name: Run host tests (CTest)
        if: ${{ hashFiles('tests/CMakeLists.txt') != '' }}
        run: ctest --test-dir build-host --output-on-failure

      # ---------- 2) 交叉编译固件
      - name: Configure ARM firmware
        run: |
          cmake -S . -B build-arm -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-gcc-arm-none-eabi.cmake \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DENABLE_TESTS=OFF

      - name: Build ARM firmware
        run: cmake --build build-arm -j

      - name: Size report
        run: |
          echo "=== ELF size ==="
          arm-none-eabi-size build-arm/*.elf || true
          echo "=== Symbols (top 50) ==="
          arm-none-eabi-nm --size-sort --print-size build-arm/*.elf | tail -50 || true

      - name: Static analysis (cppcheck)
        run: |
          cppcheck --enable=warning,style,performance,portability \
                   --inline-suppr --quiet --error-exitcode=1 \
                   --suppress=missingIncludeSystem \
                   -I modules -I startup -I . \
                   modules startup .

      # ---------- 3) 可选 QEMU 烟雾测试（若存在 qemu/CMakeLists.txt）
      - name: Configure QEMU smoke
        if: ${{ hashFiles('qemu/CMakeLists.txt') != '' }}
        run: cmake -S qemu -B build-qemu -G Ninja -DCMAKE_BUILD_TYPE=${BUILD_TYPE}

      - name: Build QEMU smoke
        if: ${{ hashFiles('qemu/CMakeLists.txt') != '' }}
        run: cmake --build build-qemu -j

      - name: Run QEMU smoke
        if: ${{ hashFiles('qemu/CMakeLists.txt') != '' }}
        run: |
          qemu-system-arm -M mps2-an385 -cpu cortex-m3 -nographic -semihosting \
            -kernel build-qemu/qemu_smoke.elf | tee qemu.log
          grep -q "QEMU hello" qemu.log

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build-arm/**/*.elf
            build-arm/**/*.bin
            build-arm/**/*.map
            qemu.log
            build-arm/**/compile_commands.json
          if-no-files-found: warn

  release:
    needs: build-test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: out

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            out/**/*.elf
            out/**/*.bin
            out/**/*.map
            out/qemu.log
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
